{"version":3,"sources":["components/Map.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Map","_this","this","MyGoogleMap","withGoogleMap","props","react_default","a","createElement","lib","defaultCenter","lat","lng","defaultZoom","markers","map","marker","index","animation","isBounce","window","google","maps","Animation","BOUNCE","key","position","onClick","openInfoWindow","isOpen","id","className","name","address","city","postalCode","containerElement","style","height","width","mapElement","Component","Navigation","role","type","title","value","searchQuery","onChange","updateSearch","placeholder","filter","isShow","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","setState","assign","getPlaces","fetch","then","resp","json","data","console","log","places","response","groups","items","venue","location","catch","err","event","target","substr","_this2","filteredMarkers","toLowerCase","indexOf","navigator","onLine","components_Navigation","bind","components_Map","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ac7d1f29.chunk.js","sourcesContent":["import { withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\"\r\nimport React, { Component } from 'react';\r\n\r\nclass Map extends Component {\r\n   render() {\r\n   const MyGoogleMap = withGoogleMap(props => (\r\n      <GoogleMap\r\n        // Edinburgh lat and lng\r\n        defaultCenter = { { lat: 55.953, lng: -3.188 } }\r\n        defaultZoom = { 13 }\r\n      >\r\n      {/* if markers exists map over the markers and create marker with infowindow*/}\r\n      {this.props.markers && this.props.markers.map((marker,index) => (\r\n        <Marker \r\n          // if marker state isBounce is true then marker will bounce\r\n          animation={marker.isBounce ? window.google.maps.Animation.BOUNCE : null}\r\n          key={index} position={{lat: marker.lat, lng: marker.lng}}\r\n          // click on marker change state isOpen to true and open infowindow\r\n          onClick={() => this.props.openInfoWindow(marker)} \r\n        >\r\n          {marker.isOpen && \r\n            <InfoWindow key={marker.id}>\r\n              <div className=\"info-window\">\r\n                <p><b>{marker.name}</b></p>\r\n                <p></p>\r\n                <p>Address:</p>\r\n                <p>{marker.address}</p>\r\n                <p>{marker.city}</p>\r\n                <p>{marker.postalCode}</p>\r\n              </div>\r\n            </InfoWindow>}\r\n        </Marker>\r\n        ))}\r\n        </GoogleMap>));\r\n  \r\n   return(\r\n      <div>\r\n        <MyGoogleMap\r\n          containerElement={ <div style={{ height: '500px', width: '500px' }} /> }\r\n          mapElement={ <div style={{ height: `100%` }} /> }\r\n          >\r\n          </MyGoogleMap>        \r\n      </div>\r\n   )\r\n   }\r\n}\r\nexport default Map;","import React, { Component } from 'react';\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"nav\" role=\"navigation\">\r\n                <input type=\"text\" className=\"input\" title=\"Filter Places\"\r\n                    value={this.props.searchQuery}\r\n                    onChange={this.props.updateSearch}\r\n                    placeholder=\"filter places\"\r\n                />\r\n                \r\n                <ul className=\"button-list\">\r\n                {/*show places on list and map with isShow true*/}\r\n                {/* */}\r\n                {this.props.markers.filter(marker => (marker.isShow === true)).map(marker=>{\r\n                    return <li key={marker.id}><button onClick={() => this.props.openInfoWindow(marker)} ><b>{marker.name}</b></button></li>\r\n                })}\r\n                </ul>\r\n          </nav>\r\n        )\r\n    }\r\n}\r\nexport default Navigation;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Map from './components/Map.js'\r\nimport Navigation from './components/Navigation.js'\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      places: [], //foursquere places\r\n      markers: [],\r\n      searchQuery: ''\r\n    };\r\n  }\r\n \r\n  openInfoWindow = (marker)=> {\r\n    // close all infowindow's markers\r\n    this.state.markers.map(marker => {\r\n      marker.isOpen = false;\r\n      // set all marker animation to null\r\n      marker.isBounce = false;\r\n      this.setState({markers: Object.assign(this.state.markers, marker)});\r\n    })\r\n\r\n    //open infowindow on click marker\r\n    marker.isOpen = true;\r\n    // make click marker bounce\r\n    marker.isBounce = true;\r\n    this.setState({markers: Object.assign(this.state.markers, marker)});\r\n  }\r\n\r\n  // this function update state.searchQuery when user is typing inside input\r\n  updateSearch(event){\r\n    this.setState({searchQuery: event.target.value.substr(0,20)});\r\n    console.log(\"[This.state.searchQuery]:\", this.state.searchQuery);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getPlaces();\r\n  }\r\n\r\n  // code base on code from https://developer.foursquare.com/docs/api\r\n  getPlaces = () => {\r\n    // get 20 places from Edinburgh\r\n    fetch('https://api.foursquare.com/v2/venues/explore?client_id=OGJ2WWKTOHB0PARLTNR4WTUBLSETYALE10WNXGTL33P2BNAW&client_secret=4LB1EELLF4CDIOSBLJMALSBORN0XAGO22CXYTH0KFJES3UTF&v=20180323&limit=20&near=Edinburgh&query=top+picks')\r\n    .then(\r\n      // save as json format\r\n      resp => resp.json()\r\n    )\r\n    .then((data) => {\r\n        console.log(data);\r\n        // pass data into state\r\n        \r\n        console.log('this.state.places:',this.state.places)\r\n        const places = data.response.groups[0].items;\r\n\r\n        const markers = places.map( marker => {\r\n          return {\r\n            id: marker.venue.id,\r\n            name: marker.venue.name,\r\n            lat: marker.venue.location.lat,\r\n            lng: marker.venue.location.lng,\r\n            address: marker.venue.location.address,\r\n            postalCode: marker.venue.location.postalCode,\r\n            city: marker.venue.location.city,\r\n            isShow: true,\r\n            isOpen: false,\r\n            isBounce: false\r\n          }\r\n        })\r\n        this.setState({places, markers});\r\n    }).catch(\r\n      err => console.log('Error', err)\r\n    );   \r\n  }\r\n     \r\n  render() {\r\n    // create array of filtered arrays of markers\r\n    let filteredMarkers = this.state.markers.filter(\r\n      (marker) => {        \r\n        return marker.name.toLowerCase().indexOf(this.state.searchQuery.toLowerCase()) !== -1;\r\n      }\r\n    );\r\n    return (\r\n      <div className=\"app\">\r\n        <header className=\"header\">\r\n          <h1 className=\"app-title\">Explore Edinburgh APP</h1>\r\n        </header>\r\n\r\n        <main className=\"main\" role=\"main\">\r\n        { (navigator.onLine) && (\r\n          <Navigation \r\n            markers={filteredMarkers}\r\n            searchQuery={this.state.searchQuery}\r\n            updateSearch={this.updateSearch.bind(this)}\r\n            openInfoWindow={this.openInfoWindow}\r\n          />\r\n        )}\r\n          <section className=\"map\" role=\"application\">\r\n            { (navigator.onLine) && (\r\n              <Map\r\n              places={this.state.places}\r\n              openInfoWindow={this.openInfoWindow}\r\n              markers={filteredMarkers}\r\n              />\r\n              )\r\n            }\r\n            {\r\n              !(navigator.onLine) && (\r\n                <div>\r\n                  You're offline. \r\n                </div>\r\n              )\r\n            }\r\n\r\n          </section>\r\n        </main>\r\n        \r\n        <footer className=\"footer\">FEND Project 8 Neighborhood Map by Jaroslaw Trzybinski</footer>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}