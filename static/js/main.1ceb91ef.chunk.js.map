{"version":3,"sources":["components/Map.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Map","_this","this","MyGoogleMap","withGoogleMap","props","react_default","a","createElement","lib","defaultCenter","lat","lng","defaultZoom","markers","map","marker","index","animation","isBounce","window","google","maps","Animation","BOUNCE","key","position","onClick","openInfoWindow","isOpen","id","className","name","address","city","postalCode","containerElement","style","height","width","mapElement","Component","Navigation","role","type","title","value","searchQuery","onChange","updateSearch","placeholder","filter","isShow","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","setState","assign","getPlaces","fetch","then","resp","json","data","console","log","places","response","groups","items","venue","location","catch","err","event","target","substr","_this2","filteredMarkers","toLowerCase","indexOf","navigator","onLine","components_Navigation","bind","components_Map","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1ceb91ef.chunk.js","sourcesContent":["import { withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\"\r\nimport React, { Component } from 'react';\r\n\r\nclass Map extends Component {\r\n   render() {\r\n   const MyGoogleMap = withGoogleMap(props => (\r\n      <GoogleMap\r\n        // Edinburgh lat and lng\r\n        defaultCenter = { { lat: 55.953, lng: -3.188 } }\r\n        defaultZoom = { 13 }\r\n      >\r\n      {/* if markers exists map over the markers and create marker with infowindow*/}\r\n      {this.props.markers && this.props.markers.map((marker,index) => (\r\n        <Marker \r\n          // if marker state isBounce is true then marker will bounce\r\n          animation={marker.isBounce ? window.google.maps.Animation.BOUNCE : null}\r\n          key={index} position={{lat: marker.lat, lng: marker.lng}}\r\n          // click on marker change state isOpen to true and open infowindow\r\n          onClick={() => this.props.openInfoWindow(marker)} \r\n        >\r\n          {marker.isOpen && \r\n            <InfoWindow key={marker.id}>\r\n              <div className=\"info-window\">\r\n                <p><b>{marker.name}</b></p>\r\n                <p></p>\r\n                <p>Address:</p>\r\n                <p>{marker.address}</p>\r\n                <p>{marker.city}</p>\r\n                <p>{marker.postalCode}</p>\r\n              </div>\r\n            </InfoWindow>}\r\n        </Marker>\r\n        ))}\r\n        </GoogleMap>));\r\n  \r\n   return(\r\n      <div>\r\n        <MyGoogleMap\r\n          containerElement={ <div style={{ height: '500px', width: '500px' }} /> }\r\n          mapElement={ <div style={{ height: `100%` }} /> }\r\n          >\r\n          </MyGoogleMap>        \r\n      </div>\r\n   )\r\n   }\r\n}\r\nexport default Map;","import React, { Component } from 'react';\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"nav\" role=\"navigation\">\r\n                <input type=\"text\" className=\"input\" title=\"Filter Places\"\r\n                    value={this.props.searchQuery}\r\n                    onChange={this.props.updateSearch}\r\n                    placeholder=\"filter places\"\r\n                />\r\n                \r\n                <ul className=\"button-list\">\r\n                {/*show places on list and map with isShow true*/}\r\n                {/* */}\r\n                {this.props.markers.filter(marker => (marker.isShow === true)).map(marker=>{\r\n                    return <li key={marker.id}><button onClick={() => this.props.openInfoWindow(marker)} ><b>{marker.name}</b></button></li>\r\n                })}\r\n                </ul>\r\n          </nav>\r\n        )\r\n    }\r\n}\r\nexport default Navigation;","import React, { Component } from 'react';\nimport './App.css';\nimport Map from './components/Map.js'\nimport Navigation from './components/Navigation.js'\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      places: [], //foursquere places\n      markers: [],\n      searchQuery: ''\n    };\n  }\n \n  openInfoWindow = (marker)=> {\n    // close all infowindow's markers\n    this.state.markers.map(marker => {\n      marker.isOpen = false;\n      // set all marker animation to null\n      marker.isBounce = false;\n      this.setState({markers: Object.assign(this.state.markers, marker)});\n    })\n\n    //open infowindow on click marker\n    marker.isOpen = true;\n    // make click marker bounce\n    marker.isBounce = true;\n    this.setState({markers: Object.assign(this.state.markers, marker)});\n  }\n\n  // this function update state.searchQuery when user is typing inside input\n  updateSearch(event){\n    this.setState({searchQuery: event.target.value.substr(0,20)});\n    console.log(\"[This.state.searchQuery]:\", this.state.searchQuery);\n  }\n\n  componentDidMount() {\n    this.getPlaces();\n  }\n\n  // code base on code from https://developer.foursquare.com/docs/api\n  getPlaces = () => {\n    // get 20 places from Edinburgh\n    fetch('https://api.foursquare.com/v2/venues/explore?client_id=OGJ2WWKTOHB0PARLTNR4WTUBLSETYALE10WNXGTL33P2BNAW&client_secret=4LB1EELLF4CDIOSBLJMALSBORN0XAGO22CXYTH0KFJES3UTF&v=20180323&limit=20&near=Edinburgh&query=top+picks')\n    .then(\n      // save as json format\n      resp => resp.json()\n    )\n    .then((data) => {\n        console.log(data);\n        // pass data into state\n        \n        console.log('this.state.places:',this.state.places)\n        const places = data.response.groups[0].items;\n\n        const markers = places.map( marker => {\n          return {\n            id: marker.venue.id,\n            name: marker.venue.name,\n            lat: marker.venue.location.lat,\n            lng: marker.venue.location.lng,\n            address: marker.venue.location.address,\n            postalCode: marker.venue.location.postalCode,\n            city: marker.venue.location.city,\n            isShow: true,\n            isOpen: false,\n            isBounce: false\n          }\n        })\n        this.setState({places, markers});\n    }).catch(\n      err => console.log('Error', err)\n    );   \n  }\n     \n  render() {\n    // create array of filtered arrays of markers\n    let filteredMarkers = this.state.markers.filter(\n      (marker) => {        \n        return marker.name.toLowerCase().indexOf(this.state.searchQuery.toLowerCase()) !== -1;\n      }\n    );\n    return (\n      <div className=\"app\">\n        <header className=\"header\">\n          <h1 className=\"app-title\">Explore Edinburgh APP</h1>\n        </header>\n\n        <main className=\"main\" role=\"main\">\n        { (navigator.onLine) && (\n          <Navigation \n            markers={filteredMarkers}\n            searchQuery={this.state.searchQuery}\n            updateSearch={this.updateSearch.bind(this)}\n            openInfoWindow={this.openInfoWindow}\n          />\n        )}\n          <section className=\"map\" role=\"application\">\n            { (navigator.onLine) && (\n              <Map\n              places={this.state.places}\n              openInfoWindow={this.openInfoWindow}\n              markers={filteredMarkers}\n              />\n              )\n            }\n            {\n              !(navigator.onLine) && (\n                <div>\n                  You're offline. \n                </div>\n              )\n            }\n\n          </section>\n        </main>\n        \n        <footer className=\"footer\">FEND Project 8 Neighborhood Map by Jaroslaw Trzybinski</footer>\n        \n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}